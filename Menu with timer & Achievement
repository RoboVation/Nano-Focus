#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define LED_PIN 3  // Timer completion indicator

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Joystick pins
#define JOY_X A0
#define JOY_Y A1
#define JOY_BTN 2

// Timer background image (simplified circular pattern)
const unsigned char timerBackground[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xf8, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xdf, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0x03, 0x00, 0x00, 0x08, 0x79, 0xdb, 0x70, 0x1e, 0xe7, 0xde, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x03, 0x00, 0x00, 0x0e, 0x49, 0x1b, 0x40, 0x08, 0x25, 0xd2, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x19, 0x80, 0x00, 0x08, 0x49, 0x1b, 0x70, 0x08, 0x25, 0xde, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x31, 0x80, 0x00, 0x08, 0x49, 0x1b, 0x18, 0x0c, 0x25, 0xd0, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x21, 0x80, 0x00, 0x08, 0x79, 0xce, 0x70, 0x06, 0x3c, 0x5c, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x0c, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 
  0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 
  0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 
  0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 
  0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 
  0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
  0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// Icon definitions
const unsigned char epd_bitmap_Achievement_icon[] PROGMEM = {
  0xff, 0xff, 0xf0, 0x0f, 0xf0, 0x0f, 0xc0, 0x03, 0xd1, 0x8b, 0x93, 0xcd, 0xd1, 0x8b, 0xc0, 0x03, 
  0xf0, 0x0f, 0xf0, 0x0f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xf0, 0x0f, 0xff, 0xff
};


const unsigned char epd_bitmap_Timer_icon[] PROGMEM = {
  0xef, 0xf7, 0xe0, 0x07, 0xef, 0xf7, 0xe8, 0x17, 0xe0, 0x07, 0xf0, 0x0f, 0xf8, 0x1f, 0xfc, 0x3f, 
  0xfc, 0x3f, 0xf8, 0x1f, 0xf4, 0x0f, 0xe8, 0x17, 0xe8, 0x17, 0xe8, 0x17, 0xe0, 0x07, 0xff, 0xff
};

// Achievement icons
const unsigned char epd_bitmap_bronze_medal[] PROGMEM = {
  0xff, 0xff, 0xf8, 0x1f, 0xf0, 0x0f, 0xe3, 0xc7, 0xc7, 0xe3, 0xcf, 0xf3, 
  0xcf, 0xf3, 0xcf, 0xf3, 0xc7, 0xe3, 0xe3, 0xc7, 0xf0, 0x0f, 0xf8, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_silver_medal[] PROGMEM = {
  0xff, 0xff, 0xf8, 0x1f, 0xf0, 0x0f, 0xe0, 0x07, 0xc0, 0x03, 0xc0, 0x03, 
  0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xe0, 0x07, 0xf0, 0x0f, 0xf8, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_gold_medal[] PROGMEM = {
  0xff, 0xff, 0xf8, 0x1f, 0xf0, 0x0f, 0xe7, 0xe7, 0xcf, 0xf3, 0xdf, 0xfb, 
  0xdf, 0xfb, 0xdf, 0xfb, 0xcf, 0xf3, 0xe7, 0xe7, 0xf0, 0x0f, 0xf8, 0x1f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char epd_bitmap_streak_icon[] PROGMEM = {
  0xff, 0xff, 0xf0, 0x0f, 0xe0, 0x07, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 
  0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0xe0, 0x07, 0xf0, 0x0f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Menu structure
typedef struct {
  const char* name;
  const unsigned char* icon;
} MenuItem;

MenuItem menuItems[] = {
  {"Timer", epd_bitmap_Timer_icon},
  {"Achievements", epd_bitmap_Achievement_icon}
};

const int menuCount = sizeof(menuItems) / sizeof(menuItems[0]);
int currentSelection = 0;
int displayOffset = 0;
unsigned long lastInputTime = 0;
bool joyBtnPressed = false;

// Timer variables
const uint16_t timePresets[] = {5, 10, 15, 30, 45, 60, 90, 120, 180}; // in minutes
const uint8_t presetCount = sizeof(timePresets) / sizeof(timePresets[0]);
uint8_t currentPreset = 2; // Default to 15 minutes
uint32_t selectedSeconds = timePresets[currentPreset] * 60;
bool timerRunning = false;
uint32_t timerStart = 0;
bool inTimerScreen = false;
bool timerComplete = false;
unsigned long lastButtonPress = 0;
uint8_t buttonPressCount = 0;

// Achievement system
typedef struct {
  const char* name;
  const unsigned char* icon;
  uint16_t pointsRequired;
  bool unlocked;
} Achievement;

Achievement achievements[] = {
  {"Bronze", epd_bitmap_bronze_medal, 20, false},
  {"Silver", epd_bitmap_silver_medal, 50, false},
  {"Gold", epd_bitmap_gold_medal, 100, false},
  {"Platinum", epd_bitmap_streak_icon, 200, false}
};

const int achievementCount = sizeof(achievements) / sizeof(achievements[0]);

// User progress variables
uint16_t totalPoints = 0;
uint8_t streakCount = 0;
unsigned long lastSessionTime = 0;
const long streakTimeout = 86400000; // 24 hours in ms

void setup() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  pinMode(JOY_BTN, INPUT_PULLUP);
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    for(;;);
  }
  
  display.clearDisplay();
  display.display();
}

void loop() {
  if(inTimerScreen) {
    handleTimerInput();
    updateTimerDisplay();
    
    // Check if timer completed
    if(timerRunning) {
      uint32_t elapsed = (millis() - timerStart) / 1000;
      if(elapsed >= selectedSeconds) {
        timerComplete = true;
        timerRunning = false;
        digitalWrite(LED_PIN, HIGH);
        
        // Award points based on session length (1 point per minute)
        uint16_t minutes = selectedSeconds / 60;
        totalPoints += minutes;
        
        // Update streak
        updateStreak();
        
        // Check for new achievements
        checkAchievements();
        
        flashScreen();
      }
    }
  } else {
    handleMenuInput();
    displayMenu();
    digitalWrite(LED_PIN, LOW); // Ensure LED is off when not in timer
  }
  delay(50);
}

void handleMenuInput() {
  int yValue = analogRead(JOY_Y);
  bool btnState = digitalRead(JOY_BTN) == LOW;
  
  // Handle button press
  if(btnState && !joyBtnPressed && millis() - lastInputTime > 200) {
    joyBtnPressed = true;
    lastInputTime = millis();
    executeMenuItem(currentSelection);
    return;
  }
  if(!btnState) joyBtnPressed = false;
  
  // Handle navigation
  if(millis() - lastInputTime > 200) {
    if(yValue < 300) { // Up
      if(currentSelection > 0) {
        currentSelection--;
        if(currentSelection < displayOffset) {
          displayOffset = currentSelection;
        }
      }
      lastInputTime = millis();
    } else if(yValue > 700) { // Down
      if(currentSelection < menuCount - 1) {
        currentSelection++;
        if(currentSelection > displayOffset + 2) {
          displayOffset = currentSelection - 2;
        }
      }
      lastInputTime = millis();
    }
  }
}

void displayMenu() {
  display.clearDisplay();
  
  // Draw status bar
  display.fillRect(0, 0, 128, 12, WHITE);
  display.setTextColor(BLACK);
  display.setTextSize(1);
  display.setCursor(2, 2);
  display.print("NANO FOCUS");
    
  // Draw 3 visible items
  for(int i = 0; i < 3; i++) {
    int itemIndex = displayOffset + i;
    if(itemIndex >= menuCount) break;
    
    int yPos = 15 + (i * 16);
    
    // Draw selection background for selected item
    if(itemIndex == currentSelection) {
      display.fillRect(0, yPos - 2, 128, 16, WHITE);
      display.drawBitmap(5, yPos, menuItems[itemIndex].icon, 16, 16, BLACK);
      display.setTextColor(BLACK);
    } else {
      display.drawBitmap(5, yPos, menuItems[itemIndex].icon, 16, 16, WHITE);
      display.setTextColor(WHITE);
    }
    
    // Draw menu text
    display.setCursor(30, yPos + 4);
    display.print(menuItems[itemIndex].name);
  }
  
  // Draw scroll indicator if needed
  if(menuCount > 3) {
    drawScrollIndicator();
  }
  
  display.display();
}

void drawScrollIndicator() {
  int visibleHeight = 48; // 3 items * 16px
  int indicatorHeight = visibleHeight / menuCount;
  if(indicatorHeight < 4) indicatorHeight = 4;
  int indicatorPos = 15 + ((currentSelection * (visibleHeight - indicatorHeight)) / (menuCount - 1));
  
  display.drawRect(125, 15, 2, visibleHeight, WHITE);
  display.fillRect(125, indicatorPos, 2, indicatorHeight, WHITE);
}

void executeMenuItem(int item) {
  // Selection animation
  for(int i = 0; i < 5; i++) {
    display.clearDisplay();
    display.fillRect(i*5, 0, 128, 64, BLACK);
    displayMenu();
    display.display();
    delay(30);
  }
  
  // Check if Timer was selected
  if(item == 0) {
    inTimerScreen = true;
    timerComplete = false;
    return;
  }
  else if(item == 1) { // Achievements
    showAchievementsScreen();
    return;
  }
  
  // Show selected screen for other items
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10, 10);
  display.print("Now in: ");
  display.println(menuItems[item].name);
  display.display();
  
  // Wait for back button
  while(digitalRead(JOY_BTN) == HIGH) { delay(10); }
  while(digitalRead(JOY_BTN) == LOW) { delay(10); }
  
  // Animation - slide in
  for(int i = 4; i >= 0; i--) {
    display.clearDisplay();
    display.fillRect(i*5, 0, 128, 64, BLACK);
    displayMenu();
    display.display();
    delay(30);
  }
}

void handleTimerInput() {
  // Joystick left/right to change time preset
  int xValue = analogRead(JOY_X);
  
  if(millis() - lastInputTime > 200) {
    if(xValue < 300) { // Left
      currentPreset = (currentPreset == 0) ? presetCount - 1 : currentPreset - 1;
      selectedSeconds = timePresets[currentPreset] * 60;
      timerComplete = false;
      lastInputTime = millis();
    }
    else if(xValue > 700) { // Right
      currentPreset = (currentPreset == presetCount - 1) ? 0 : currentPreset + 1;
      selectedSeconds = timePresets[currentPreset] * 60;
      timerComplete = false;
      lastInputTime = millis();
    }
  }

  // Button press handling with double-click detection
  if(digitalRead(JOY_BTN) == LOW) {
    if(millis() - lastButtonPress > 300) {
      buttonPressCount = 0;
    }
    buttonPressCount++;
    lastButtonPress = millis();
    
    while(digitalRead(JOY_BTN) == LOW) { delay(10); }
    
    if(buttonPressCount == 1) {
      // Single press - start/stop timer or acknowledge completion
      if(timerComplete) {
        timerComplete = false;
        digitalWrite(LED_PIN, LOW);
      } else if(!timerRunning) {
        timerRunning = true;
        timerStart = millis();
      } else {
        timerRunning = false;
      }
    } else if(buttonPressCount >= 2) {
      // Double press - exit timer
      inTimerScreen = false;
      timerRunning = false;
      timerComplete = false;
      buttonPressCount = 0;
      digitalWrite(LED_PIN, LOW);
      
      // Animation - slide out
      for(int i = 0; i < 5; i++) {
        display.clearDisplay();
        display.fillRect(i*5, 0, 128, 64, BLACK);
        displayMenu();
        display.display();
        delay(30);
      }
      return;
    }
    lastInputTime = millis();
  }
}

void updateTimerDisplay() {
  display.clearDisplay();
  
  // Draw timer background
  display.drawBitmap(0, 0, timerBackground, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
  
  // Calculate time to display
  uint32_t displaySeconds = selectedSeconds;
  if(timerRunning) {
    uint32_t elapsed = (millis() - timerStart) / 1000;
    displaySeconds = (elapsed >= selectedSeconds) ? 0 : selectedSeconds - elapsed;
  }

  // Format time (MM:SS)
  uint16_t minutes = displaySeconds / 60;
  uint8_t seconds = displaySeconds % 60;

  // Display time (centered, larger)
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(SCREEN_WIDTH/2 - 32, SCREEN_HEIGHT/2 - 10);
  if(minutes < 10) display.print("0");
  display.print(minutes);
  display.print(":");
  if(seconds < 10) display.print("0");
  display.print(seconds);

  // Display status
  display.setTextSize(1);
  display.setCursor(SCREEN_WIDTH/2 - 29, SCREEN_HEIGHT - 20);
  if(timerComplete) {
    display.print("COMPLETE!");
  } else if(timerRunning) {
    display.print("RUNNING");
  } else {
    display.print("READY");
  }

  display.display();
}

void flashScreen() {
  for(uint8_t i = 0; i < 3; i++) {
    display.invertDisplay(true);
    delay(300);
    display.invertDisplay(false);
    delay(300);
  }
}

void checkAchievements() {
  bool newMedal = false;
  
  for(int i = 0; i < achievementCount; i++) {
    if(!achievements[i].unlocked && totalPoints >= achievements[i].pointsRequired) {
      achievements[i].unlocked = true;
      newMedal = true;
    }
  }
  
  if(newMedal) {
    showMedalUnlocked();
  }
}

void showMedalUnlocked() {
  // Find the highest unlocked medal
  int highestMedal = -1;
  for(int i = achievementCount-1; i >= 0; i--) {
    if(achievements[i].unlocked) {
      highestMedal = i;
      break;
    }
  }
  
  if(highestMedal == -1) return;
  
  // Show medal animation
  for(int r = 5; r <= 30; r += 5) {
    display.clearDisplay();
    display.drawCircle(display.width()/2, display.height()/2 - 10, r, WHITE);
    display.display();
    delay(50);
  }
  
  // Show medal details
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("NEW MEDAL!");
  
  // Draw icon
  display.drawBitmap(display.width()/2 - 8, 15, achievements[highestMedal].icon, 16, 16, WHITE);
  
  display.setCursor(0, 35);
  display.print(achievements[highestMedal].name);
  display.println(" MEDAL");
  display.print("Points: ");
  display.print(totalPoints);
  
  display.display();
  delay(2000);
}

void showAchievementsScreen() {
  int currentPage = 0; // 0 = progress, 1 = medals
  bool exitScreen = false;
  unsigned long lastInputTime = millis();
  
  while(!exitScreen) {
    display.clearDisplay();
    
    if(currentPage == 0) { // Progress page
      // Draw header
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.println("PROGRESS");
      display.print("Points: ");
      display.print(totalPoints);
      display.print("/200");
      display.drawLine(0, 18, display.width(), 18, WHITE);
      
      // Draw progress bar
      int progressWidth = map(min(totalPoints, 200), 0, 200, 0, 120);
      display.drawRect(4, 25, 120, 10, WHITE);
      display.fillRect(4, 25, progressWidth, 10, WHITE);
      
      // Show next medal progress
      display.setCursor(0, 40);
      for(int i = 0; i < achievementCount; i++) {
        if(!achievements[i].unlocked) {
          display.print("Next: ");
          display.print(achievements[i].name);
          display.print(" at ");
          display.print(achievements[i].pointsRequired);
          display.println(" pts");
          break;
        }
      }
    } 
    else { // Medals page
      // Draw header
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.println("YOUR MEDALS");
      display.drawLine(0, 18, display.width(), 18, WHITE);
      
      // Display unlocked medals
      int yPos = 22;
      for(int i = 0; i < achievementCount; i++) {
        if(achievements[i].unlocked) {
          display.drawBitmap(5, yPos, achievements[i].icon, 16, 16, WHITE);
          display.setCursor(25, yPos + 4);
          display.print(achievements[i].name);
          yPos += 18;
        }
      }
      
      if(yPos == 22) { // No medals unlocked
        display.setCursor(10, 30);
        display.print("No medals yet!");
      }
    }
    
    display.display();
    
    // Handle navigation
    bool btnPressed = false;
    while(!btnPressed) {
      int yValue = analogRead(JOY_Y);
      
      // Page switching with left/right
      int xValue = analogRead(JOY_X);
      if(xValue < 300 && millis() - lastInputTime > 200) {
        currentPage = (currentPage == 0) ? 1 : 0;
        lastInputTime = millis();
        break;
      }
      else if(xValue > 700 && millis() - lastInputTime > 200) {
        currentPage = (currentPage == 0) ? 1 : 0;
        lastInputTime = millis();
        break;
      }
      
      if(digitalRead(JOY_BTN) == LOW) {
        btnPressed = true;
        while(digitalRead(JOY_BTN) == LOW) { delay(10); }
      }
      
      delay(10);
    }
    
    if(btnPressed) {
      exitScreen = true;
      // Animation - slide out
      for(int i = 0; i < 5; i++) {
        display.clearDisplay();
        display.fillRect(i*5, 0, 128, 64, BLACK);
        displayMenu();
        display.display();
        delay(30);
      }
    }
  }
}

void updateStreak() {
  unsigned long currentTime = millis();
  
  // Reset streak if more than 24 hours since last session
  if(currentTime - lastSessionTime > streakTimeout) {
    streakCount = 0;
  }
  
  streakCount++;
  lastSessionTime = currentTime;
}
