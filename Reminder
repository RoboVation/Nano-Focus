#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const int VRx = A0;
const int VRy = A1;
const int SW = 2;
const int LED_PIN = 4;

String tasks[] = {"Study", "Work", "Code", "Exercise"};
int currentMenu = 0;
int selectedTask = -1;

int hour = 0, minute = 0;
bool settingTime = false;
bool reminderSet = false;
bool reminderActive 
int baseHour = 0, baseMinute = 0;
unsigned long startMillis,= false;
 taskStartMillis;
unsigned long reminderStartMillis = 0;


void setup() {
  pinMode(SW, INPUT_PULLUP);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);


  Serial.begin(9600);


  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.display();


  waitForTimeInput();
  drawMenu();
}


void loop() {
  int xVal = analogRead(VRx);
  int yVal = analogRead(VRy);
  bool buttonPressed = digitalRead(SW) == LOW;


  static unsigned long lastInput = 0;


  if (reminderActive) {
    handleReminderBlink(buttonPressed);
    return;
  }


  if (millis() - lastInput > 200) {
    if (!settingTime) {
      if (yVal < 400) {
        currentMenu = (currentMenu - 1 + 4) % 4;
        drawMenu();
        lastInput = millis();
      }
      if (yVal > 600) {
        currentMenu = (currentMenu + 1) % 4;
        drawMenu();
        lastInput = millis();
      }
      if (buttonPressed) {
        selectedTask = currentMenu;
        settingTime = true;
        drawTimeSetting();
        lastInput = millis();
      }
    } else {
      if (xVal < 400) {
        hour = (hour + 1) % 24;
        drawTimeSetting();
        lastInput = millis();
      }
      if (xVal > 600) {
        hour = (hour - 1 + 24) % 24;
        drawTimeSetting();
        lastInput = millis();
      }
      if (yVal < 400) {
        minute = (minute + 1) % 60;
        drawTimeSetting();
        lastInput = millis();
      }
      if (yVal > 600) {
        minute = (minute - 1 + 60) % 60;
        drawTimeSetting();
        lastInput = millis();
      }


      if (buttonPressed) {
        reminderSet = true;
        settingTime = false;
        taskStartMillis = millis();
        showConfirmation();
        lastInput = millis();
      }
    }
  }


  if (reminderSet) {
    unsigned long elapsedMillis = millis() - startMillis;


    int currentHour = baseHour + (elapsedMillis / 3600000);
    int currentMinute = baseMinute + ((elapsedMillis / 60000) % 60);
    if (currentMinute >= 60) {
      currentHour += currentMinute / 60;
      currentMinute %= 60;
    }


    int nowMins = currentHour * 60 + currentMinute;
    int taskMins = hour * 60 + minute;


    if (nowMins >= (taskMins - 30)) {
      reminderActive = true;
      reminderStartMillis = millis();
    }
  }
}
void drawMenu() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(28, 0);
  display.println("Select a Task");


  for (int i = 0; i < 4; i++) {
    if (i == currentMenu) {
      display.fillRect(0, 12 + i * 12, SCREEN_WIDTH, 11, SSD1306_WHITE);
      display.setTextColor(SSD1306_BLACK, SSD1306_WHITE);
    } else {
      display.setTextColor(SSD1306_WHITE);
    }
    display.setCursor(8, 12 + i * 12);
    display.print(i + 1);
    display.print(". ");
    display.println(tasks[i]);
  }
  display.display();
}


void drawTimeSetting() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(20, 0);
  display.println("Set Reminder Time");


  display.setCursor(0, 16);
  display.print("Task: ");
  display.println(tasks[selectedTask]);


  display.setCursor(0, 30);
  display.print("Time: ");
  if (hour < 10) display.print("0");
  display.print(hour);
  display.print(":");
  if (minute < 10) display.print("0");
  display.println(minute);


  display.setCursor(0, 44);
  display.println("X=Hr Y=Min Btn=Set");
  display.display();
}


void showConfirmation() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(25, 10);
  display.println("Reminder Set!");


  display.setCursor(10, 30);
  display.print(tasks[selectedTask]);
  display.print(" at ");
  if (hour < 10) display.print("0");
  display.print(hour);
  display.print(":");
  if (minute < 10) display.print("0");
  display.println(minute);


  display.display();
  delay(2000);
  drawMenu();
}


void handleReminderBlink(bool buttonPressed) {
  static bool show = true;
  static unsigned long lastBlink = 0;


  if (millis() - lastBlink > 500) {
    show = !show;
    digitalWrite(LED_PIN, show ? HIGH : LOW);


    display.clearDisplay();
    if (show) {
      display.setTextSize(2);
      display.setCursor(12, 5);
      display.println("REMINDER");


      display.setTextSize(1);
      display.setCursor(20, 35);
      display.println(tasks[selectedTask]);


      display.setCursor(20, 50);
      if (hour < 10) display.print("0");
      display.print(hour);
      display.print(":");
      if (minute < 10) display.print("0");
      display.println(minute);
    }
    display.display();
    lastBlink = millis();
  }


  if (buttonPressed) {
    reminderActive = false;
    reminderSet = false;
    digitalWrite(LED_PIN, LOW);
    display.clearDisplay();
    display.setCursor(0, 25);
    display.println("Reminder Acknowledged.");
    display.display();
    delay(2000);
    drawMenu();
  }


  if (millis() - reminderStartMillis > 60000) {
    reminderStartMillis = millis();
  }
}
void waitForTimeInput() {
  Serial.println("Enter current time as HH:MM (e.g., 14:30):");
  String input = "";
  while (true) {
    if (Serial.available()) {
      char c = Serial.read();
      if (c == '\n' || c == '\r') {
        if (input.length() >= 4) break;
      } else {
        input += c;
      }
    }
  }


  baseHour = input.substring(0, 2).toInt();
  baseMinute = input.substring(3, 5).toInt();
  startMillis = millis();


  Serial.print("Time set to: ");
  Serial.print(baseHour);
  Serial.print(":");
  Serial.println(baseMinute);
}
